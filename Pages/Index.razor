@page "/"

@using System.IO
@using System.Globalization
@using CsvHelper
@using EsmaulHusna.I18nText
@using EsmaulHusna.Model
@inject HttpClient Http
@inject Toolbelt.Blazor.I18nText.I18nText I18nText

<title>@Text.SiteName</title>
<h8>@Text.Header</h8>

<div>
    <MatPaginator Length="@itemCount" PageSize="@pageSize" Page="@OnPage"></MatPaginator>
</div>

@if (currentNames == null)
{
    <p><em>Loading...</em></p>
}
else
{

    <div class="container maincontent">
        <div class="row">
            <div class="col">

                @foreach (var item in pageModel.PageItems.OrderBy(p => p.TargetIndex))
                {
                    if (!item.Found)
                    {
                        <Draggable Data="@item" Zone="@item.Index.ToString()">
                            <button type="button" @onclick="(s)=>ItemClicked(item,Side.Source)" class="btn btn-outline-primary">
                                @item.NameItem.original <br />  @item.NameItem.latin
                            </button>
                        </Draggable>
                    }
                }

            </div>
            <div class="col">

                @foreach (var item in pageModel.PageItems.OrderBy(p => p.Index))
                {
                    <DropTarget T="PageItem" Zone="@item.Index.ToString()" Drop="OnDrop">
                        @if (item.Found)
                        {
                            <a href="#" class="btn btn-outline-primary disabled" tabindex="-1" role="button" aria-disabled="true">@item.NameItem.original <br />  @item.NameItem.latin</a>

                        }
                        else
                        {
                            <button type="button" @onclick="(s)=>ItemClicked(item,Side.Destination)" class="btn btn-outline-primary">"??????????"<br />"??????????"</button>
                        }
                    </DropTarget>
                }

            </div>
        </div>
    </div>

}

@code{
    public I18nText.Text Text = new I18nText.Text();
    [CascadingParameter] string CurrentLang { get; set; }
    int itemCount = 0;
    int pageSize = 5;
    private NameItem[] allItems;
    private NameItem[] currentNames;
    private PageModel pageModel;
    private ClickedItem clickedItem;
    public string oldlang;

    protected async override Task OnInitializedAsync()
    {
        Text = await I18nText.GetTextTableAsync<I18nText.Text>(this);

        await ReadFile();

        CreatePageItems();
        oldlang = CurrentLang;

    }

    protected async Task ReadFile()
    {
        //  var lang = await I18nText.GetCurrentLanguageAsync();
        var csvtring = await Http.GetStreamAsync("data/" + $"esmaulhusna-{CurrentLang}.csv");
        

        using (var reader = new StreamReader(csvtring))
        {
            using var csv = new CsvReader(reader, CultureInfo.InvariantCulture);
            csv.Configuration.HasHeaderRecord = true;
            csv.Configuration.Delimiter = "|";
            allItems = csv.GetRecords<NameItem>().ToArray();
        }
        itemCount = allItems.Length;
        currentNames = allItems.Take(pageSize).ToArray();

    }



    protected async override Task OnParametersSetAsync()
    {
        //if (CurrentLang == oldlang) return;
        Console.WriteLine("CurrentLang---" + CurrentLang);
        await ReadFile();
        CreatePageItems();
        //oldlang = CurrentLang;
       // StateHasChanged();
    }

    private void ItemClicked(PageItem pageItem, Side side)
    {
        if (clickedItem?.Index == pageItem.Index
            && clickedItem?.Side != side)
        {
            pageItem.Found = true;
            clickedItem = null;
            StateHasChanged();
        }
        else
        {
            clickedItem = new ClickedItem
            {
                Index = pageItem.Index,
                Side = side
            };
        }

    }
    void OnDrop(PageItem data)
    {
        data.Found = true;
        clickedItem = null;

        // Important: Invoke StateHasChanged() to update the page
        StateHasChanged();
    }
    void OnPage(MatPaginatorPageEvent e)
    {
        pageSize = e.PageSize;
        currentNames = allItems.Skip(e.PageIndex * e.PageSize).Take(e.PageSize).ToArray();
        CreatePageItems();
    }



    private void CreatePageItems()
    {
        Console.WriteLine("currentNames.Length: " + currentNames.Length);
        int[] randoms = GetRandoms(currentNames.Length);
        PageItem[] pageItem1 = currentNames.Select((cn, i) => new PageItem
        {
            NameItem = cn,
            Found = false,
            Index = i + 1,
            TargetIndex = randoms[i]
        }).ToArray();
        pageModel = new PageModel
        {
            PageItems = pageItem1
        };
    }

    private int[] GetRandoms(int length)
    {
        var rfn = new Func<Random>(() => new Random((int)(DateTime.Now.Ticks % int.MaxValue)));

        var lst = new List<int>();


        while (lst.Count < length)
        {
            var rnd = rfn().Next();
            if (lst.Contains(rnd)) continue;
            lst.Add(rnd);
        }
        return lst.ToArray();
    }

    private NameItem[] Shuffle(NameItem[] nameItems)
    {
        var rnd1 = new Func<Random>(() =>
        {
            return new Random((int)(DateTime.Now.Ticks % int.MaxValue));
        });
        var rnums = Enumerable.Repeat(1, nameItems.Length).Select(_ => rnd1().Next());

        return nameItems
            .Zip(rnums, (nm, nu) => (nm, nu))
            .OrderBy(s => s.nu)
            .Select(s => s.nm)
            .ToArray();
    }


}