@page "/"
@using EsmaulHusna.Model
@inject HttpClient Http

<h1>Esmaul Husna Memorization Application</h1>

<div>
    <MatPaginator Length="@itemCount" PageSize="@pageSize" Page="@OnPage"></MatPaginator>
</div>


@if (pageItems == null)
{
    <p><em>Loading...</em></p>
}
else
{

    @foreach (var item in pageItems.Zip(shuffled, (ord, shfld) => (ord, shfld)))
    {
        <Draggable Data="@item.shfld" Zone="DropZone">
            <div class="draggable">
                @item.shfld.original
            </div>
        </Draggable>
        <DropTarget T="NameItem" Zone="DropZone" Drop="@OnDrop">
            <div class="drop-target">
               @item.ord.meaning
            </div>
        </DropTarget>

    }

}


@code
{

    int itemCount = 0;
    int pageSize = 10;
    public NameItem[] allItems;
    public NameItem[] pageItems;
    public NameItem[] shuffled;

    void OnDrop(NameItem data)
    {
       

    // Important: Invoke StateHasChanged() to update the page
        StateHasChanged();
    }
    void OnPage(MatPaginatorPageEvent e)
    {
        pageSize = e.PageSize;
        pageItems = allItems.Skip(e.PageIndex * e.PageSize).Take(e.PageSize).ToArray();
    }


    protected override async Task OnInitializedAsync()
    {
        allItems = await Http.GetJsonAsync<NameItem[]>("data/esmaulhusna-en.json");
        itemCount = allItems.Length;
        pageItems = allItems.Take(pageSize).ToArray();

        shuffled = Shuffle(pageItems);

    }

    private NameItem[] Shuffle(NameItem[] nameItems)
    {
        var rnd1 = new Func<Random>(() =>
        {
            return new Random((int)(DateTime.Now.Ticks % int.MaxValue));
        });
        var rnums = Enumerable.Repeat(1, nameItems.Length).Select(_ => rnd1().Next());

        return nameItems.Zip(rnums, (nm, nu) => (nm, nu)).OrderBy(s => s.nu).Select(s => s.nm).ToArray();
    }

}
@*<SurveyPrompt Title="How is Blazor working for you?" />*@