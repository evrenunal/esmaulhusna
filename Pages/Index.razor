@page "/"
@using EsmaulHusna.Model
@inject HttpClient Http

<h1>Esmaul Husna Memorization Application</h1>

<div>
    <MatPaginator Length="@itemCount" PageSize="@pageSize" Page="@OnPage"></MatPaginator>
</div>


@if (currentNames == null)
{
    <p><em>Loading...</em></p>
}
else
{

    <div class="mat-layout-grid">
        <div class="mat-layout-grid-inner">
            <div class="mat-layout-grid-cell mat-layout-grid-cell-span-6">

                @foreach (var item in pageModel.PageItems.OrderBy(p => p.TargetIndex))
                {
                    if (!item.Found)
                    {
                        <Draggable Data="@item" Zone="@item.Index.ToString()">
                            <button type="button" class="btn btn-outline-primary btn-lg">@item.NameItem.original <br />  @item.NameItem.latin</button>
                        </Draggable>

                    }
                }

            </div>
            <div class="mat-layout-grid-cell mat-layout-grid-cell-span-4">
                <MatList SingleSelection="true" TwoLine="true">
                    @foreach (var item in pageModel.PageItems.OrderBy(p => p.Index))
                    {
                        <DropTarget T="PageItem" Zone="@item.Index.ToString()" Drop="@OnDrop">
                                    <MatListItem>
                                        <MatListItemText>
                                            <MatListItemPrimaryText>@(item.Found ? item.NameItem.original : "??????????")</MatListItemPrimaryText>
                                            <MatListItemSecondaryText>@(item.Found ? item.NameItem.latin : "??????????")</MatListItemSecondaryText>
                                        </MatListItemText>
                                    </MatListItem>
                        </DropTarget>
                    }
                </MatList>
            </div>
        </div>
    </div>

}


@code
{

    int itemCount = 0;
    int pageSize = 10;
    private NameItem[] allItems;
    private NameItem[] currentNames;
    private PageModel pageModel;

    void OnDrop(PageItem data)
    {
        data.Found = true;

        // Important: Invoke StateHasChanged() to update the page
        StateHasChanged();
    }
    void OnPage(MatPaginatorPageEvent e)
    {
        pageSize = e.PageSize;
        currentNames = allItems.Skip(e.PageIndex * e.PageSize).Take(e.PageSize).ToArray();
        CreatePageItems();
    }


    protected override async Task OnInitializedAsync()
    {
        allItems = await Http.GetJsonAsync<NameItem[]>("data/esmaulhusna-en.json");
        itemCount = allItems.Length;
        currentNames = allItems.Take(pageSize).ToArray();

        CreatePageItems();
    }

    private void CreatePageItems()
    {
        int[] randoms = GetRandoms(currentNames.Length);
        PageItem[] pageItem1 = currentNames.Select((cn, i) => new PageItem
        {
            NameItem = cn,
            Found = false,
            Index = i + 1,
            TargetIndex = randoms[i]
        }).ToArray();
        pageModel = new PageModel
        {
            PageItems = pageItem1
        };
    }

    private int[] GetRandoms(int length)
    {
        var rfn = new Func<Random>(() => new Random((int)(DateTime.Now.Ticks % int.MaxValue)));

        var lst = new List<int>();


        while (lst.Count < length)
        {
            var rnd = rfn().Next();
            if (lst.Contains(rnd)) continue;
            lst.Add(rnd);
        }
        return lst.ToArray();
    }

    private NameItem[] Shuffle(NameItem[] nameItems)
    {
        var rnd1 = new Func<Random>(() =>
        {
            return new Random((int)(DateTime.Now.Ticks % int.MaxValue));
        });
        var rnums = Enumerable.Repeat(1, nameItems.Length).Select(_ => rnd1().Next());

        return nameItems
            .Zip(rnums, (nm, nu) => (nm, nu))
            .OrderBy(s => s.nu)
            .Select(s => s.nm)
            .ToArray();
    }

}
@*<SurveyPrompt Title="How is Blazor working for you?" />*@